{"version":3,"sources":["components/details.js","App.js","serviceWorker.js","index.js"],"names":["Details","data","this","props","react_default","a","createElement","row","style","marginTop","gutter","col","span","textAlign","fontWeight","principal","amount","numPayments","monthlyPayment","interestRate","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onAmountChange","setState","onMonthChange","e","months","target","value","getDetails","preventDefault","url","concat","state","axios","get","then","res","status","isLoaded","catch","err","message","error","_this2","_this$state","className","width","padding","margin","es_form","onSubmit","Item","label","slider","min","max","defaultValue","step","marks","500","5000","tipFormatter","onChange","input","type","placeholder","es_button","block","htmlType","details","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77ff90b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col } from 'antd';\r\n\r\nclass Details extends Component {\r\n       \r\n    render() {\r\n        const { data } = this.props;\r\n\t\treturn (\r\n            <div>\r\n\t\t\t<Row style={{ marginTop: '1rem' }} gutter={16}>\r\n\t\t\t\t<Col span={12} style={{ textAlign: 'right', fontWeight: 'bold' }}>Principal Amount: </Col>\r\n\t\t\t\t<Col span={12}>${data.principal.amount}</Col>\r\n\t\t\t\t<Col span={12} style={{ textAlign: 'right', fontWeight: 'bold' }}>Total Payments </Col>\r\n\t\t\t\t<Col span={12}>{data.numPayments} Months</Col>\r\n\t\t\t\t<Col span={12} style={{ textAlign: 'right', fontWeight: 'bold' }}>Monthly Installment </Col>\r\n\t\t\t\t<Col span={12}>${data.monthlyPayment.amount} / Months</Col>\r\n\t\t\t\t<Col span={12} style={{ textAlign: 'right', fontWeight: 'bold' }}>Interest Rate: </Col>\r\n\t\t\t\t<Col span={12}>{data.interestRate * 100} %</Col>\r\n\t\t\t\t<Col span={12} style={{ textAlign: 'right', fontWeight: 'bold' }}>Net Payable Amount </Col>\r\n\t\t\t\t<Col span={12}>${data.monthlyPayment.amount * data.numPayments} </Col>\r\n            </Row>\r\n        </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Details;","import React, {  Component } from 'react';\nimport axios from 'axios';\nimport { Slider, Input, Form, Button, message } from 'antd';\nimport Details from './components/details';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n        this.state = {\n            data: {},\n            isLoaded: false,\n            amount: 500,\n            months: 6\n        }\n}\n\nonAmountChange = amount => {\n  this.setState({ \n        amount \n    });\n}\n\nonMonthChange = e => {\n  this.setState({ \n    months: + e.target.value \n  }); \n}\n\ngetDetails = e => {\n  e.preventDefault();\n  const url = `https://ftl-frontend-test.herokuapp.com/interest?amount=${this.state.amount}&numMonths=${this.state.months}`;\n  axios.get(url)\n    .then(res => {\n      if (res && res.status === 200) {\n        this.setState({\n          data: res.data,\n          isLoaded: true,\n        })\n      }\n    })\n    .catch(err => {\n      message.error(err.message);\n    });\n}\n\n\n  render() {\n      const { data, isLoaded, amount, months } = this.state;\n      return(\n        <div className = 'main'>\n          <h1 className=\"header\">Loan Application</h1>\n          <div style={{ width: '30%', padding: '2rem', margin: '0 auto' }}>\n            <Form onSubmit={this.getDetails}>\n            <Form.Item label=\"Loan Amount\">\n              <Slider\n                min={500}\n                max={5000}\n                defaultValue={amount}\n                step={100}\n                marks={{ 500: '$500', 5000: '$5K' }}\n                tipFormatter={(value) => { return `$ ${value}` }}\n                onChange={this.onAmountChange}\n              />\n            </Form.Item>\n            <Form.Item label=\"Total Months\">\n          <Input\n            type=\"number\"\n            placeholder=\"Enter Months\"\n            defaultValue={months}\n            onChange={this.onMonthChange}\n          />\n        </Form.Item>\n        <Button type=\"primary\" block htmlType=\"submit\"> \n          GET DETAILS\n        </Button>\n      </Form>  \n        {\n          !!isLoaded &&\n          <Details data={data} />\n        }\n\n        {\n          !!isLoaded &&\n          <Button onClick={() => this.setState({ isLoaded: false })}> Hide </Button>\n        }\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}